<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">
<!--MyBatis-generator配置文件：-->
<generatorConfiguration>
    <properties resource="jdbc.properties"/>
    <!--context：指定生成环境-->
    <!--targetRuntime="MyBatis3Simple"：生成兼容MyBatis 3.0或更高版本，但不会有"by example"一类的方法，只有少量的动态SQL。-->
    <!--defaultModelType="flat"：每一张表只生成一个实体类。这个实体类包含表中的所有字段。-->
    <context id="MysqlContext" targetRuntime="MyBatis3Simple" defaultModelType="flat">

        <!--beginningDelimiter和endingDelimiter：自动分割包含空格的SQL标识符,在MySql中使用`-->
        <property name="beginningDelimiter" value="`"/>
        <property name="endingDelimiter" value="`"/>

        <!--生成的java对象模型自动添加toString()方法-->
        <plugin type="org.mybatis.generator.plugins.ToStringPlugin"/>
        <!--生成的java对象模型自动添加hashCode()和Equals()方法-->
        <plugin type="org.mybatis.generator.plugins.EqualsHashCodePlugin"/>

        <!--注释生成配置-->
        <!--原始版本：注释为英文，生成结果：Xxxx.java,XxxxMapper,XxxxMapper.xml，-->
        <commentGenerator>
        <!--扩展版本：中文注释，生成结果：XxxxEntity.java,XxxxDao.java,XxxxDao.xml -->
        <commentGenerator type="org.mybatis.generator.internal.HairyCommentGenerator">
            <property name="javaFileEncoding" value="UTF-8"/>
            <!--是否抑制所有的注释，默认为false-->
            <property name="suppressAllComments" value="false"/>
            <!--是否抑制注释中的时间，默认为false，这里改为true，不生成时间（如果生成时间，则每次都是新版本，每次都要提交）-->
            <property name="suppressDate" value="true"/>
        </commentGenerator>

        <!--数据库连接属性-->
        <jdbcConnection driverClass="${jdbc.driverClassName}"
                        connectionURL="${jdbc.url}"
                        userId="${jdbc.username}"
                        password="${jdbc.password}">
        </jdbcConnection>

        <!--Java实体类生成配置-->
        <!--targetPackage：生成的实体类存放的包名-->
        <!--targetProject：目标项目路径（这里是相对路径，也可以绝对路径）-->
        <javaModelGenerator targetPackage="pers.hanchao.himybatis.generator.entity" targetProject="src\main\java">
            <!--是否允许建立子包，generator能够通过mysql的schema再生成一级子目录，默认为false-->
            <property name="enableSubPackages" value="true"/>
            <!--是否对查询结果进行trim()操作，例如username.trim()，默认为false-->
            <property name="trimStrings" value="true" />
        </javaModelGenerator>

        <!--XML映射文件配置-->
        <!--targetPackage：生成的XML映射文件的包名-->
        <!--targetProject：目标项目路径（这里是相对路径，也可以绝对路径）-->
        <sqlMapGenerator targetPackage="generator"  targetProject="src\main\resources">
            <!--是否允许建立子包，generator能够通过mysql的schema再生成一级子目录，默认为false-->
            <property name="enableSubPackages" value="true"/>
        </sqlMapGenerator>

        <!--Java 客户端代码生成配置，即IDAO配置-->
        <!--type="XMLMAPPER"：生成的对象是 MyBatis 3.x 映射器基础结构的 Java接口。 这些接口将会依赖于生成的XML文件。-->
        <!--targetPackage：用于存放IDAO-->
        <!--targetProject：目标项目路径（这里是相对路径，也可以绝对路径）-->
        <javaClientGenerator type="XMLMAPPER" targetPackage="pers.hanchao.himybatis.generator.dao" targetProject="src\main\java">
            <!--是否允许建立子包，generator能够通过mysql的schema再生成一级子目录，默认为false-->
            <property name="enableSubPackages" value="true"/>
        </javaClientGenerator>

        <!--配置生成哪些表、哪些主键-->
        <!--schema="exam"：指定schema-->
        <!--tableName="%"：生成全部表-->
        <!--<table schema="exam" tableName="%">-->
        <table schema="exam" tableName="topic">
            <!--generatedKey：指定自动生成主键的属性-->
            <!--column="id"：凡是列名为id的，都生成为主键-->
            <!--sqlStatement="Mysql"：insert表时主键转换为SELECT LAST_INSERT_ID()-->
            <generatedKey column="id" sqlStatement="Mysql"/>
        </table>
    </context>
</generatorConfiguration>