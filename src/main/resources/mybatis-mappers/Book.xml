<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--MyBatis的分配置文件，分别对应每个实体，用来配置SQL操作及SQL语句-->
<!--namespace，定义这个映射的命名域,这里指向Dao层接口-->
<mapper namespace="pers.hanchao.himybatis.dynamic.IBookDAO">
    <!--Integer的空值形式是null,String的空值形式是''-->

    <!--根据id查询一本书-->
    <select id="selectBookById" resultType="Book" parameterType="Integer">
        SELECT * FROM `book` WHERE id = #{id}
    </select>

    <!--查询所有的旧书，查询条件可能有价格、是否汉化-->
    <select id="selectBookWitIf" parameterType="Book" resultType="Book">
        SELECT * FROM `book`
        WHERE old = 1
        <if test="price != null">
            AND price &lt;= #{price}
        </if>
        <if test="chinese != null">
            AND chinese = #{chinese}
        </if>
    </select>

    <!--查询所有书籍，查询条件可能有价格、是否汉化【where形式】-->
    <select id="selectBookWithWhere" parameterType="Book" resultType="Book">
        SELECT * FROM `book`
        <where>
            <if test="price != null">
                price &gt;= #{price}
            </if>
            <if test="chinese != null">
                AND chinese = #{chinese}
            </if>
        </where>
    </select>
    <!--查询所有书籍，查询条件可能有价格、是否汉化【trim形式】-->
    <select id="selectBookWithTrim" resultType="Book" parameterType="Book">
        SELECT * FROM `book`
        <trim prefix="WHERE" prefixOverrides="AND|OR">
            <if test="price != null">
                price &gt;= #{price}
            </if>
            <if test="chinese != null">
                AND chinese = #{chinese}
            </if>
        </trim>
    </select>

    <!--根据id修改一本书，可能的修改条件有价格、书籍名【set形式】-->
    <update id="updateBookWithSet" parameterType="Book">
        UPDATE `book`
        <set>
            <if test="price != null">
                price = #{price},
            </if>
            <if test="name != ''">
                name = #{name}
            </if>
        </set>
        <where>
            id = #{id}
        </where>
    </update>
    <!--根据id修改一本书，可能的修改条件有价格、书籍名【trim形式】-->
    <update id="updateBookWithTrim" parameterType="Book">
        UPDATE `book`
        <trim prefix="SET" prefixOverrides=",">
            <if test="price != null">
                price = #{price},
            </if>
            <if test="name != ''">
                name = #{name}
            </if>
        </trim>
        <where>
            id = #{id}
        </where>
    </update>

    <!--查询书籍，如果查询条件有编号按编号查询，有书名就按书名查询，有价格按价格查询,都没有就查询旧书-->
    <select id="selectBookWithChoose" parameterType="Book" resultType="Book">
        SELECT * FROM `book`
        <choose>
            <when test="number != ''">
                WHERE number = #{number}
            </when>
            <when test="name != ''">
                WHERE name = #{name}
            </when>
            <when test="price != null">
                WHERE price = #{price}
            </when>
            <otherwise>
                WHERE old = TRUE
            </otherwise>
        </choose>
    </select>

    <!--查询书籍，查询条件为多个书籍名称{array}-->
    <!--在使用ForEach标签时，如果参数类型是Array类型，则collection="Array"-->
    <!--参数是String[]类型，index是数组下表，item是数组元素array[i]-->
    <select id="selectBookWithForEachArray" resultType="Book">
        SELECT * FROM `book`
        <where>
            name IN
            <foreach collection="array" item="item" open="(" separator="," close=")">
                #{item}
            </foreach>
        </where>
    </select>

    <!--查询书籍，查询条件为多个书籍名称{list}-->
    <!--在使用ForEach标签时，如果参数类型是List类型，则collection="list"-->
    <!--参数是List<String>类型，index是元素的序号，item是列表元素list.get(i)-->
    <select id="selectBookWithForEachList" resultType="Book">
        SELECT * FROM `book`
        <where>
            name IN 
            <foreach collection="list" item="item" open="(" separator="," close=")">
              #{item}
            </foreach>
        </where>
    </select>

    <!--查询书籍，查询条件为多个书籍名称{map}-->
    <!--在使用ForEach标签时，如果参数类型是Map类型，则collection=map.key-->
    <!--参数map是Map<key1,Map<key2,value2>>类型，collection是Map<key2,value2>，index=key2，item=value2-->
    <select id="selectBookWithForEachMap" resultType="Book">
        SELECT * FROM `book`
        <where>
            name IN
            <foreach collection="nameMap" item="item" open="(" separator="," close=")">
                #{item}
            </foreach>
        </where>
    </select>

    <!--查询书籍，要求书籍编号符合一个年级的编号，如初中、高中等等-->
    <select id="selectBookWithBind" parameterType="String" resultType="Book">
        SELECT * FROM `book`
        <bind name="grade_number" value="number + '%'"/>
        <where>
            number like #{grade_number}
        </where>
    </select>

    <!--根据数据库厂商类型进行不同的操作-->
    <select id="selectBookWithMultiDB" parameterType="Book" resultType="Book">
        SELECT * FROM `book`
        <where>
            <if test="_databaseId == 'oracle'">
                SUBSTR(name,0,2) == '初中'
            </if>
            <if test="_databaseId == 'mysql'">
                SUBSTRING (name,0,2) == '初中'
            </if>
        </where>
    </select>
</mapper>